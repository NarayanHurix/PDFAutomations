package com.hurix.imageutility;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.PixelGrabber;

public class ImageUtils 
{

	public static BufferedImage compressImage(BufferedImage image, float quality)
				  throws Exception 
    {
		if (hasAlpha(image))
			return image;
		
    }

	/**
	 * This method returns true if the specified image has transparent pixels
	 * @param image the image object to check for transparency 
	 * @return true for transparent image else false
	 */
	public static boolean hasAlpha(Image image) 
	{
		// Get the image's color model
		ColorModel cm = getColorModel(image);
		// System.out.println("Color Model Class: "+(cm.getClass().getName())+" Data: "+cm);
		return cm.hasAlpha();
	}
	
	/**
	 * This method retrieves the ColorModel of the supplied image
	 * @param image the image object 
	 * @return the color model of the supplied image
	 */
	public static ColorModel getColorModel(Image image) 
	{
		// If buffered image, the color model is readily available
		if (image instanceof BufferedImage) {
			BufferedImage bimage = (BufferedImage) image;
			return bimage.getColorModel();
		}

		// Use a pixel grabber to retrieve the image's color model, grabbing a
		// single
		// pixel is usually sufficient
		PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);
		try {
			pg.grabPixels();
		} catch (InterruptedException e) {
		}

		// Get the image's color model
		ColorModel cm = pg.getColorModel();
		return cm;
	}

	
}
