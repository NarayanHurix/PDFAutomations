package com.hurix.imageutility;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.PixelGrabber;
import java.util.Iterator;

import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;

public class ImageUtils 
{

	public static BufferedImage compressImage(BufferedImage image, float quality)
				  throws Exception 
    {
		if (hasAlpha(image)) return image;
		if (quality < 0) quality = 0.5f;
		// Get a ImageWriter for jpeg format.
		ImageWriter writer = getJPEGImageWriter();
		// Create the ImageWriteParam to compress the image.
		ImageWriteParam param = createImageWriteParam(writer, quality);
		ImageWriteParam param = createImageWriteParam(writer, quality);
		// The output will be a ByteArrayOutputStream (in memory)
		ByteArrayOutputStream bos = new ByteArrayOutputStream(32768);
		ImageOutputStream ios = ImageIO.createImageOutputStream(bos);
		writer.setOutput(ios);
		writer.write(null, new IIOImage(image, null, null), param);
		ios.flush(); // otherwise the buffer size will be zero!
		// From the ByteArrayOutputStream create a RenderedImage.
		ByteArrayInputStream in = new ByteArrayInputStream(bos.toByteArray());
		BufferedImage bimg = ImageIO.read(in);
		int size = bos.toByteArray().length;
		System.out.println("Compressed Image Size: " + size);
		return bimg;
	}

	/**
	 * This method returns true if the specified image has transparent pixels
	 * @param image the image object to check for transparency 
	 * @return true for transparent image else false
	 */
	public static boolean hasAlpha(Image image) 
	{
		// Get the image's color model
		ColorModel cm = getColorModel(image);
		// System.out.println("Color Model Class: "+(cm.getClass().getName())+" Data: "+cm);
		return cm.hasAlpha();
	}
	
	/**
	 * This method retrieves the ColorModel of the supplied image
	 * @param image the AWT Image object 
	 * @return the color model of the supplied image
	 */
	public static ColorModel getColorModel(Image image) 
	{
		// If buffered image, the color model is readily available
		if (image instanceof BufferedImage) {
			BufferedImage bimage = (BufferedImage) image;
			return bimage.getColorModel();
		}

		// Use a pixel grabber to retrieve the image's color model, grabbing a
		// single
		// pixel is usually sufficient
		PixelGrabber pg = new PixelGrabber(image, 0, 0, 1, 1, false);
		try {
			pg.grabPixels();
		} catch (InterruptedException e) {
		}

		// Get the image's color model
		ColorModel cm = pg.getColorModel();
		return cm;
	}

	/**
	 * This method returns JPEG Image Writer
	 * @return Returns Image Writer in jpeg format
	 */
	public static ImageWriter getJPEGImageWriter() 
	{
		Iterator<ImageWriter> writers = ImageIO.getImageWritersBySuffix("jpeg");
		if (!writers.hasNext())
			throw new IllegalStateException("No writers found");
		ImageWriter writer = (ImageWriter) writers.next();
		return writer;
	}

	/**
	 * Create the ImageWriteParam to compress the image.
	 * @param writer the ImageWriter Object to be set in the param
	 * @param quality the quality of image to be set in the param
	 * @return the ImageWriteParam object
	 */
	public static ImageWriteParam createImageWriteParam(ImageWriter writer,
			float quality) {
		ImageWriteParam param = writer.getDefaultWriteParam();
		param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
		param.setCompressionQuality(quality);
		return param;
	}

	
}
